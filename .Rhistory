print("Character Variables:")
print("ts_complex, ts_finfish_ind, ts_habitat_ind, protected, reported")
print("Name Variables:")
print("ts_afs_name/in_ts_afs_name, ts_scientific_name/in_ts_scientific_name, ts_confidential_name/in_ts_confidential_name, family_name/in_family_name, superclass_name/in_superclass_name, ts_kingdom/in_ts_kingdom, genus_name/in_genus_name, family_sc_name/in_family_sc_name, genus_sc_name/in_genus_sc_name")
}
} else {
# Define a utility function
toUpperFirst <- function(string){
split.string <- strsplit(trimws(tolower(string), which = "both"), split = "")[[1]]
return.string <- gsub(", ","",toString(append(toupper(split.string[1]), split.string[2:length(split.string)])))
return(return.string)
}
ranger <- function(x)
if (length(x) == 1)
x
else
paste(x[1], x[length(x)], sep = ":")
tapply(k, cumsum(c(TRUE, diff(k) != 1)), ranger)
# Define the translation functions
numeric_range = function(variable, m, json_df){
for(n in 1:length(variable)){
if(stringr::str_detect(variable[n], ":")){
temp = stringr::str_split(variable[n], ":")[[1]]
temp[temp==""]<-"NULL"
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":{\"$between\":[", temp[1], ",", temp[2], "]}")
} else {
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", variable[n], "\"")
}
}
return(json_df)
}
character_input = function(variable, m, json_df, type = "Upper"){
for(n in 1:length(variable)){
if(type == "Upper"){
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", toupper(variable[n]), "\"")
}
if(type == "Title"){
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", toUpperFirst(variable[n]), "\"")
}
if(type == "Lower"){
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", tolower(variable[n]), "\"")
}
if(type == "Exact"){
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", variable[n], "\"")
}
}
return(json_df)
}
character_input_title = function(variable, m, json_df, option){
for(n in 1:length(variable)){
json_df[n,m] <- paste0("\"", deparse(substitute(variable)), "\":\"", toUpperFirst(tolower(variable[n])), "\"")
}
return(json_df)
}
character_like = function(variable, m, json_df, type = "Upper"){
for(n in 1:length(variable)){
if(type == "Upper"){
json_df[n,m] <- paste0("\"", stringr::str_remove(deparse(substitute(variable)), "in_"), "\":{\"$like\":\"%", toupper(variable[n]), "%\"}")
}
if(type == "Title"){
json_df[n,m] <- paste0("\"", stringr::str_remove(deparse(substitute(variable)), "in_"), "\":{\"$like\":\"%", tolower(variable[n]), "%\"}")
json_df[n,m] <- paste0("\"", stringr::str_remove(deparse(substitute(variable)), "in_"), "\":{\"$like\":\"%", toUpperFirst(variable[n]), "%\"}")
}
}
return(json_df)
}
json_df = data.frame() # Initialize the code dataframe
m = 1 # Set a column counter
if(tolower(series) == "landings"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(tsn[1])){
json_df <- numeric_range(tsn, m, json_df)
m = m+1
}
if(!is.na(ts_afs_name[1]) & is.na(in_ts_afs_name[1])){
json_df <- character_input(ts_afs_name, m, json_df)
m = m+1
}
if(!is.na(in_ts_afs_name[1])){
json_df <- character_like(in_ts_afs_name, m, json_df)
m = m+1
}
if(!is.na(ts_scientific_name[1]) & is.na(in_ts_scientific_name[1])){
json_df <- character_input(ts_scientific_name, m, json_df, type = "Title")
m = m+1
}
if(!is.na(in_ts_scientific_name[1])){
json_df <- character_like(in_ts_scientific_name, m, json_df, type = "Title")
m = m+1
}
if(!is.na(region_name[1])){
json_df <- character_input_title(region_name, m, json_df, type = "Exact")
m = m+1
}
if(!is.na(state_name[1])){
json_df <- character_input(state_name, m, json_df)
m = m+1
}
if(!is.na(year[1])){
json_df <- numeric_range(year, m, json_df)
m = m+1
}
if(!is.na(pounds[1])){
json_df <- numeric_range(pounds, m, json_df)
m = m+1
}
if(!is.na(dollars[1])){
json_df <- numeric_range(dollars, m, json_df)
m = m+1
}
if(!is.na(tot_count[1])){
json_df <- numeric_range(tot_count, m, json_df)
m = m+1
}
if(!is.na(source[1])){
json_df <- character_input(source, m, json_df)
m = m+1
}
if(!is.na(collection[1])){
json_df <- character_input_title(collection, m, json_df, type = "Title")
m = m+1
}
}
if(tolower(series) == "trade_data"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(year[1])){
json_df <- numeric_range(year, m, json_df)
m = m+1
}
if(!is.na(month[1])){
json_df <- character_input(month, m, json_df, type = "Exact")
m = m+1
}
if(!is.na(hts_number[1])){
json_df <- numeric_range(hts_number, m, json_df)
m = m+1
}
if(!is.na(name[1]) & is.na(in_name[1])){
json_df <- character_input(name, m, json_df)
m = m+1
}
if(!is.na(in_name[1])){
json_df <- character_like(in_name, m, json_df)
m = m+1
}
if(!is.na(cntry_code[1])){
json_df <- numeric_range(cntry_code, m, json_df)
m = m+1
}
if(!is.na(fao[1])){
json_df <- numeric_range(fao, m, json_df)
m = m+1
}
if(!is.na(cntry_name[1]) & is.na(in_cntry_name[1])){
json_df <- character_input(cntry_name, m, json_df)
m = m+1
}
if(!is.na(in_cntry_name[1])){
json_df <- character_like(in_cntry_name, m, json_df)
m = m+1
}
if(!is.na(district_code[1])){
json_df <- numeric_range(district_code, m, json_df)
m = m+1
}
if(!is.na(district_name[1]) & is.na(in_district_name[1])){
json_df <- character_input(district_name, m, json_df)
m = m+1
}
if(!is.na(in_district_name[1])){
json_df <- character_like(in_district_name, m, json_df)
m = m+1
}
if(!is.na(edible_code[1])){
json_df <- character_like(edible_code, m, json_df)
m = m+1
}
if(!is.na(kilos[1])){
json_df <- numeric_range(kilos, m, json_df)
m = m+1
}
if(!is.na(val[1])){
json_df <- numeric_range(val, m, json_df)
m = m+1
}
if(!is.na(source[1])){
json_df <- character_input(source, m, json_df)
m = m+1
}
if(!is.na(association[1])){
json_df <- character_like(association, m, json_df)
m = m+1
}
if(!is.na(rfmo[1])){
json_df <- character_input(rfmo, m, json_df)
m = m+1
}
if(!is.na(nmfs_region_code[1])){
json_df <- character_input(nmfs_region_code, m, json_df)
m = m+1
}
}
if(tolower(series) == "source_species"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(source_species_code[1])){
json_df <- numeric_range(source_species_code, m, json_df)
m = m+1
}
if(!is.na(ss_name[1]) & is.na(in_ss_name[1])){
json_df <- character_input(ss_name, m, json_df)
m = m+1
}
if(!is.na(in_ss_name[1])){
json_df <- character_like(in_ss_name, m, json_df)
m = m+1
}
if(!is.na(nmfs_species_code[1])){
json_df <- numeric_range(nmfs_species_code, m, json_df)
m = m+1
}
if(!is.na(source_id[1])){
json_df <- numeric_range(source_id, m, json_df)
m = m+1
}
if(!is.na(tsn[1])){
json_df <- numeric_range(tsn, m, json_df)
m = m+1
}
if(!is.na(tsn_species_id[1])){
json_df <- numeric_range(tsn_species_id, m, json_df)
m = m+1
}
}
if(tolower(series) == "gears"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(gear_id[1])){
json_df <- numeric_range(gear_id, m, json_df)
m = m+1
}
if(!is.na(isscfg[1])){
json_df <- character_input(isscfg, m, json_df)
m = m+1
}
if(!is.na(g_name_short[1]) & is.na(in_g_name_short[1])){
json_df <- character_input(g_name_short, m, json_df)
m = m+1
}
if(!is.na(in_g_name_short[1])){
json_df <- character_like(in_g_name_short, m, json_df)
m = m+1
}
if(!is.na(g_name_long[1]) & is.na(in_g_name_long[1])){
json_df <- character_input(g_name_long, m, json_df)
m = m+1
}
if(!is.na(in_g_name_long[1])){
json_df <- character_like(in_g_name_long, m, json_df)
m = m+1
}
if(!is.na(g_desc[1])){
json_df <- character_like(g_desc, m, json_df, type = "Title")
m = m+1
}
if(!is.na(g_level_ind[1])){
json_df <- numeric_range(g_level_ind, m, json_df)
m = m+1
}
if(!is.na(g_parent_id[1])){
json_df <- numeric_range(g_parent_id, m, json_df)
m = m+1
}
}
if(tolower(series) == "itis_history"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(old_itis[1])){
json_df <- numeric_range(old_itis, m, json_df)
m = m+1
}
if(!is.na(new_itis[1])){
json_df <- numeric_range(new_itis, m, json_df)
m = m+1
}
}
if(tolower(series) == "source_gears"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(source_gear_code[1])){
json_df <- character_input(source_gear_code, m, json_df)
m = m+1
}
if(!is.na(sg_name[1]) & is.na(in_sg_name[1])){
json_df <- character_input(sg_name, m, json_df)
m = m+1
}
if(!is.na(in_sg_name[1])){
json_df <- character_like(in_sg_name, m, json_df, type = "Title")
m = m+1
}
if(!is.na(gear_id[1])){
json_df <- numeric_range(gear_id, m, json_df)
m = m+1
}
if(!is.na(source_id[1])){
json_df <- numeric_range(source_id, m, json_df)
m = m+1
}
}
if(tolower(series) == "tsn_species"){
# Each of these checks to see if there is an input and then transforms it into a URL snippet, checking to see if it's a range, and increments M.
if(!is.na(tsn_species_id[1])){
json_df <- numeric_range(tsn_species_id, m, json_df)
m = m+1
}
if(!is.na(tsn[1])){
json_df <- numeric_range(tsn, m, json_df)
m = m+1
}
if(!is.na(ts_afs_name[1]) & is.na(in_ts_afs_name[1])){
json_df <- character_input(ts_afs_name, m, json_df)
m = m+1
}
if(!is.na(in_ts_afs_name[1])){
json_df <- character_like(in_ts_afs_name, m, json_df)
m = m+1
}
if(!is.na(ts_scientific_name[1]) & is.na(in_ts_scientific_name[1])){
json_df <- character_input(ts_scientific_name, m, json_df, type = "Title")
m = m+1
}
if(!is.na(in_ts_scientific_name[1])){
json_df <- character_like(in_ts_scientific_name, m, json_df, type = "Title")
m = m+1
}
if(!is.na(ts_confidential_name[1]) & is.na(in_ts_confidential_name[1])){
json_df <- character_input(ts_confidential_name, m, json_df)
m = m+1
}
if(!is.na(in_ts_confidential_name[1])){
json_df <- character_like(in_ts_confidential_name, m, json_df)
m = m+1
}
if(!is.na(ts_complex[1])){
json_df <- character_input(ts_complex, m, json_df, type = "Title")
m = m+1
}
if(!is.na(ts_finfish_ind[1])){
json_df <- character_input(ts_finfish_ind, m, json_df)
m = m+1
}
if(!is.na(ts_habitat_ind[1])){
json_df <- character_input(ts_habitat_ind, m, json_df)
m = m+1
}
if(!is.na(protected[1])){
json_df <- character_input(protected, m, json_df)
m = m+1
}
if(!is.na(reported[1])){
json_df <- character_input(reported, m, json_df)
m = m+1
}
if(!is.na(family_itis[1])){
json_df <- numeric_range(family_itis, m, json_df)
m = m+1
}
if(!is.na(family_name[1]) & is.na(in_family_name[1])){
json_df <- character_input(family_name, m, json_df)
m = m+1
}
if(!is.na(in_family_name[1])){
json_df <- character_like(in_family_name, m, json_df)
m = m+1
}
if(!is.na(superclass_itis[1])){
json_df <- numeric_range(superclass_itis, m, json_df)
m = m+1
}
if(!is.na(superclass_name[1]) & is.na(in_superclass_name[1])){
json_df <- character_input(superclass_name, m, json_df)
m = m+1
}
if(!is.na(in_superclass_name[1])){
json_df <- character_like(in_superclass_name, m, json_df)
m = m+1
}
if(!is.na(ts_kingdom[1]) & is.na(in_ts_kingdom[1])){
json_df <- character_input(ts_kingdom, m, json_df, type = "Title")
m = m+1
}
if(!is.na(in_ts_kingdom[1])){
json_df <- character_like(in_ts_kingdom, m, json_df, type = "Title")
m = m+1
}
if(!is.na(genus_itis[1])){
json_df <- numeric_range(genus_itis, m, json_df)
m = m+1
}
if(!is.na(genus_name[1]) & is.na(in_genus_name[1])){
json_df <- character_input(genus_name, m, json_df)
m = m+1
}
if(!is.na(in_genus_name[1])){
json_df <- character_like(in_genus_name, m, json_df)
m = m+1
}
if(!is.na(family_sc_name[1]) & is.na(in_family_sc_name[1])){
json_df <- character_input(family_sc_name, m, json_df)
m = m+1
}
if(!is.na(in_family_sc_name[1])){
json_df <- character_like(in_family_sc_name, m, json_df)
m = m+1
}
if(!is.na(genus_sc_name[1]) & is.na(in_genus_sc_name[1])){
json_df <- character_input(genus_sc_name, m, json_df)
m = m+1
}
if(!is.na(in_genus_sc_name[1])){
json_df <- character_like(in_genus_sc_name, m, json_df)
m = m+1
}
}
# Create an expand grid of the code snippets and drops NAs. This pairs each input with each other input (but several lists will make it run long).
json_grid = expand.grid(json_df)
json_grid = tidyr::drop_na(json_grid)
json_objects = c() # Initialize a holder for the final json objects
# Iterates through the expand grid, forms the json objects, and places them in the holder.
for(n in 1:length(json_grid$V1)){
temp = "{"
for(m in 1:length(json_grid)){
temp = paste0(temp, json_grid[n,m])
if(m < length(json_grid)){
temp = paste0(temp, ", ")
} else {
temp = paste0(temp, "}")
}
}
json_objects = append(json_objects, temp)
}
if(length(json_objects)>25){
print("There are a lot of json_objects here... Did you use numerics to specify a range instead of a string? Check ?query_foss for more information.")
}
if(length(json_objects)>500){
print("There are more than 500 json_objects here. It is likely you used numerics to specify a range instead of a string. Check ?query_foss for more information. Aborting query.")
return(NULL)
}
api_output = data.frame() # Initializes a holder for the API output
# Iterates through the json objects and calls the API
for(n in json_objects){
url = paste0("https://apps-st.fisheries.noaa.gov/ods/foss/", tolower(series), "/")
temp = httr::GET(url, query = list(q = eval(n), limit = 10000))
print(temp)
if(temp$status_code==503){
print("API Service Temporarily Unavailable")
return(NULL)
}
tomp = jsonlite::fromJSON(rawToChar(temp$content))
api_output = dplyr::bind_rows(api_output, tomp$items)
counter = 0
# Checks to see if there is more data on the next page and grabs it if so
while(tomp$hasMore==TRUE){
link = tomp$links$href[tomp$links$rel=="next"]
temp = httr::GET(link)
tomp = jsonlite::fromJSON(rawToChar(temp$content))
api_output = dplyr::bind_rows(api_output, tomp$items)
counter = counter +1
if(counter>10){
print("This is taking a suspiciously long time... Is your computer connected to the internet?")
}
}
}
if(length(api_output)==0){
print("Empty Dataset")
return(NULL)
}
# Each entry has a unique link and there is risk of duplication with this wrapper method, so this filters duplicates out (unless otherwise specified).
if(allow_duplicates==FALSE){
api_output = dplyr::filter(api_output, !duplicated(api_output$links))
}
# Returns the output
return(api_output)
}
}
f <- function(x) if (length(x) == 1) x else paste(x[1], x[length(x)], sep = ":")
ranger <- function(x) if (length(x) == 1) x else paste(x[1], x[length(x)], sep = ":")
test = c(1:10, 15, 18, 19, 20)
test
tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)
list(tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger))
tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)[1]
tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)[[1]]
tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)
test
tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)
typeof(tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger))
test2 = tapply(test, cumsum(c(TRUE, diff(test) != 1)), ranger)
typeof(test)
typeof(test2)
test2[[2]]
test2[[3]]
unlist(test2)
test2[,1]
test2[1,]
test2[1]
test2[[,1]]
as.data.frame(test2)
as.list(test2)
test2[[]]
as.data.frame(test2)[1]
as.data.frame(test2)[1,]
as.data.frame(test2)[,1]
library(gitcreds)
gitcreds_set()
